package org.usfirst.frc.team6317.robot.subsystems;

import org.usfirst.frc.team6317.robot.Robot;
import org.usfirst.frc.team6317.robot.RobotMap;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class SensorsSubsystem extends Subsystem {
	public AnalogInput frontDistanceSensor = new AnalogInput(RobotMap.AnalogInputs.FRONT_DISTANCE_SENSOR);
	public AnalogInput rightDistanceSensor = new AnalogInput(RobotMap.AnalogInputs.RIGHT_DISTANCE_SENSOR);
	public AnalogInput leftDistanceSensor = new AnalogInput(RobotMap.AnalogInputs.LEFT_DISTANCE_SENSOR);
	public Encoder leftEncoder = new Encoder(2, 1, false, EncodingType.k4X);
	public Encoder rightEncoder = new Encoder(4, 3, true, EncodingType.k4X);
	
	// Encoder Values
	private final int encodersPerRev = 1440;
	private final int wheelDiameter = 6;
	private final double wheelCircumference = (Math.PI * wheelDiameter);
	private final double gearRatio = 10.71;
	
	@Override
	protected void initDefaultCommand() {}
	
	public double getDistanceCenti() {
		double volts = frontDistanceSensor.getVoltage();
		double millivolts = volts * 1000;
		double centimeters = millivolts / 4.9;
		SmartDashboard.putNumber("Distance", centimeters);
		return centimeters;
	}
	
	public double getLeftDistanceMilli() {
		double volts = leftDistanceSensor.getVoltage();
		double millivolts = volts * 1000;
		double millimeters = millivolts / .997;
		SmartDashboard.putNumber("Left MilliMeters", millimeters);
		return millimeters;
	}
	
	public double getRightDistanceMilli() {
		double volts = rightDistanceSensor.getVoltage();
		double millivolts = volts * 1000;
		double millimeters = millivolts / .997;
		SmartDashboard.putNumber("Right MilliMeters", millimeters);
		return millimeters;
	}
	
	public double getNeededEncoders(double inches) {
		double revolutionsNeeded = inches / (wheelCircumference * gearRatio);
		double encodersNeeded = encodersPerRev * revolutionsNeeded;
		return encodersNeeded;
	}
	
	public double getEncoderPosition(Encoder encoderToCheck) {
		return encoderToCheck.getRaw();
	}
}
